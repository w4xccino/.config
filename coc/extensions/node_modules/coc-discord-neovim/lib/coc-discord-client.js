"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CocDiscordClient = void 0;
const coc_nvim_1 = require("coc.nvim");
const O = __importStar(require("fp-ts/lib/Option"));
const pipeable_1 = require("fp-ts/lib/pipeable");
const discord_rpc_1 = require("discord-rpc");
const fileAssets_1 = require("./fileAssets");
const logger_1 = require("./logger");
const logger = new logger_1.Logger('discord-neovim');
class CocDiscordClient {
    /**
     * @public
     * @param {clientId:string} The client ID that will be used to make api requests.
     * @param {elapseUpdateDuration?:number} The duration in ms to update the client.
     */
    constructor(clientId, elapseUpdateDuration) {
        logger.info(`Creaing coc-discord-neovim client with client ID: ${clientId}`);
        this.discordRpcClient = new discord_rpc_1.Client({ transport: 'ipc' });
        this.discordRpcClient.connect(clientId);
        this.discordRpcClient.login({ clientId }).catch((e) => logger.error(e));
        this.elapseUpdateDuration = elapseUpdateDuration || 10000;
    }
    /**
     * Starts the ipc client.
     *
     * @public
     */
    start() {
        this.discordRpcClient.on('ready', () => {
            this.discordRpcClient.setActivity(this.activity);
            setInterval(() => this.discordRpcClient.setActivity(this.activity), this.elapseUpdateDuration);
            logger.info(`Started coc-discord-neovim client. Updating activity every ${this.elapseUpdateDuration / 1000}s.`);
        });
    }
    // eslint throws a hissy-fit becasue there is no use of the word "this" in the next block. smh.
    // eslint-disable-next-line class-methods-use-this
    buildActivity() {
        const details = pipeable_1.pipe(O.fromNullable(coc_nvim_1.workspace.uri), O.filter((x) => x.startsWith('file:///')), O.map((x) => x.substr(8)), O.map((x) => x.split('/')), O.filter((xs) => xs.length > 0), O.map((xs) => xs.reverse()[0]), O.map((x) => `Editing ${x}`), O.toUndefined);
        const state = pipeable_1.pipe(O.fromNullable(coc_nvim_1.workspace.root), O.map((x) => x.split('/')), O.filter((xs) => xs.length > 0), O.map((xs) => xs.reverse()[0]), O.map((x) => `On ${x}`), O.toUndefined);
        const startTimestamp = Date.now();
        const fileIcon = fileAssets_1.getFileTypeIcon(details);
        let activity;
        if (fileIcon) {
            activity = {
                state,
                details,
                startTimestamp,
                largeImageKey: fileIcon,
                smallImageKey: fileAssets_1.NeovimImageKey,
                instance: false,
            };
        }
        else {
            activity = {
                state,
                details,
                startTimestamp,
                largeImageKey: fileAssets_1.NeovimImageKey,
                instance: false,
            };
        }
        return activity;
    }
    get activity() {
        if (!this.currentActivity) {
            this.currentActivity = this.buildActivity();
            return this.currentActivity;
        }
        const potentialActivity = this.buildActivity();
        if (potentialActivity.state !== this.currentActivity.state
            || potentialActivity.details !== this.currentActivity.details) {
            this.currentActivity = potentialActivity;
        }
        return this.currentActivity;
    }
}
exports.CocDiscordClient = CocDiscordClient;
//# sourceMappingURL=coc-discord-client.js.map