"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const coc_nvim_1 = require("coc.nvim");
class Logger {
    /**
     * @public
     * @param {workspaceName} The name of the logger instance.
     */
    constructor(workspaceName) {
        this.output = coc_nvim_1.workspace.createOutputChannel(workspaceName);
    }
    /**
     * Convert data of various types to a string.
     *
     * @private
     * @param {data:any} Various types of data types that will be printed.
     * @returns {string} The data as a string.
     */
    // eslint throws a hissy-fit becasue there is no use of the word "this" in the next block. smh.
    // eslint-disable-next-line class-methods-use-this
    dataToString(data) {
        if (data instanceof Error) {
            return data.message;
        }
        if (data.success instanceof Boolean && !data.success && data.message instanceof String) {
            return data.message;
        }
        if (data instanceof String) {
            return data.toString();
        }
        return data.toString();
    }
    /**
     * @public
     * @param {message:string} A message to print.
     * @param {data?:any} Optional additional data.
     */
    info(message, data) {
        this.log('Info', message, data);
    }
    /**
     * @public
     * @param {message:string} A message to print.
     * @param {data?:any} Optional additional data.
     */
    warn(message, data) {
        this.log('Warn', message, data);
    }
    /**
     * @public
     * @param {message:string} A message to print.
     * @param {data?:any} Optional additional data.
     */
    error(message, data) {
        this.log('Erro', message, data);
    }
    /**
     * @public
     * @param {logLevel:string} The logging level.
     * @param {message:string} A message to print.
     * @param {data?:any} Optional additional data.
     */
    log(logLevel, message, data) {
        this.output.appendLine(`[${logLevel}  - ${new Date().toLocaleTimeString()}] - ${message}`);
        if (data) {
            this.output.appendLine(this.dataToString(data));
        }
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map